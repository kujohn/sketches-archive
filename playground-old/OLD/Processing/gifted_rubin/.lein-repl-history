(use 'gifted_rubin.core)
(use :reload 'gifted_rubin.dynamic)
(use :reload-all 'gifted_rubin.dynamic)
(use 'gifted_rubin.core)
(use :reload-all 'gifted_rubin.core)
(use :reload-all 'gifted_rubin.dynamic)
(require :reload-all 'gifted_rubin.dynamic)
(def a [1 2])
(doseq [x a] (println(x)
)
(doseq [x a] (println x))
(def a { :particles [1 2 3] })
(doseq [x (a :particles)] (println x))
(def a { :particles [] })
(doseq [x (a :particles)] (println x))
(println a)
(conj (a :particles) 5)
(conj [] 5)
(a)
(println a)
(println (a :particles))
(def a (conj (a :particles) 1))
(println a)
(print a)
(printf a)
(println a)
(doseq [x a] (println x))
(def a { :particles [1 2 3 5] })
(doseq [x (a :particles)] (println x))
(use 'gifted_rubin.core)
(use :reload-all 'gifted_rubin.core)
[A
(use :reload-all 'gifted_rubin.core)
(loop [x 0 ps []] (when (> x 10) (println "done!") (recur (+ x 1) (conj ps x))))
(loop [x 10]
  (when (> x 1)
    (println x)
    (recur (- x 2))))
(loop [x 0 ps []] (when (> x 10) (println "done!") (recur (+ x 1) (conj ps x))))
(loop [x 10 ps []] (when (> x 10) (println "done!") (recur (+ x 1) (conj ps x))))
(loop [x 10] (when (> x 20) (println x) (recur (+ x 1))))
(loop [x 10] (when (< x 20) (println x) (recur (+ x 1))))
(loop [x 10] (if (> x 20) (println "done") (recur (+ x 1))))
(loop [n (bigint 5), accumulator 1]
  (if (zero? n)
    accumulator  ; we're done
    (recur (dec n) (* accumulator n))))
(loop [x 0] (if (> x 10) (println "done") (recur (+ x 1))))
(loop [x 0] (if (> x 10) (println "done")) (recur (+ x 1)))
(loop [x 0] (if (> x 10) (println "done") (recur (+ x 1)))
)
(loop [x 0] (if (> x 10) (println "done") (recur (+ x 1))))
(loop [x 0]
(if (> x 10)
(println "done")
(recur (+ x 1)))
)
(use 'gifted_rubin.core)
(use :reload-all 'gifted_rubin.core)
(doc dotimes)
(use 'gifted_rubin.core)
(loop [x 0 acc []] (if (< x 10) (recur (+ x 1) (conj ps x)) (conj ps x)))
(loop [x 0 acc []] (if (< x 10) (recur (+ x 1) (conj acc x)) (conj acc x)))
(use 'gifted_rubin.core)
(loop [x 0 acc []] (if (< x 10) (recur (+ x 1) (conj acc x)) (conj acc x)))
(use 'gifted_rubin.core)
